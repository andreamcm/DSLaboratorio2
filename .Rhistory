datos <- read.csv("train.csv")
datos_relevantes <- datos[, c("LotArea", "YearRemodAdd", "YearBuilt", "GarageCars", "PoolArea", "YrSold", "SalePrice")]
# ----------------------------------------------
# Separación de datos en entrenamiento y prueba
# ----------------------------------------------
set.seed(123)
porciento <- 60/100 # 60% para training y 40% para pruebas
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))# Seleccion de muestras aleatorias
trainSet<-datos_relevantes[muestra,] # Grupo de entrenamiento
testSet<-datos_relevantes[-muestra,] # Grupo de pruebas
NROW(trainSet)
#KNN
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet <- gc.subset[datos_relevantes,1]
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) } # creating a normalize function for easy convertion.
porciento <- 60/100 # 60% para training y 40% para pruebas
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))# Seleccion de muestras aleatorias
trainSet<-datos_relevantes[muestra,] # Grupo de entrenamiento
testSet<-datos_relevantes[-muestra,] # Grupo de pruebas
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet.gc_labels <- trainSet[muestra,1]
testSet.gc_labels  <- testSet[-muestra,1]
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=26)
na.omit(datos_relevantes)
# ----------------------------------------------
# Separación de datos en entrenamiento y prueba
# ----------------------------------------------
set.seed(123)
porciento <- 60/100 # 60% para training y 40% para pruebas
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))# Seleccion de muestras aleatorias
trainSet<-datos_relevantes[muestra,] # Grupo de entrenamiento
testSet<-datos_relevantes[-muestra,] # Grupo de pruebas
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet.gc_labels <- trainSet[muestra,1]
testSet.gc_labels  <- testSet[-muestra,1]
NROW(trainSet)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=26)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)
knn.26 <-  knn(train=trainSet[, -1], test=testSet[, -1], cl=trainSet.gc_labels, k=29)
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet.gc_labels <- trainSet[muestra,1]
testSet.gc_labels  <- testSet[-muestra,1]
View(trainSet)
View(testSet)
knn.26 <-  knn(train=trainSet[, -1], test=testSet[, -1], cl=trainSet.gc_labels, k=29)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainknn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)Set.gc_labels <- trainSet[muestra,1]
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet.gc_labels <- trainSet[muestra,1]
testSet.gc_labels  <- testSet[-muestra,1]
NROW(trainSet)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)
trainSet.gc_labels
NROW(trainSet.gc_labels)
na.omit(trainSet.gc_labels)
NROW(trainSet.gc_labels)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)
trainSet.gc_labels
na.omit(trainSet.gc_labels)
trainSet.gc_labels
datos_relevantes <- na.omit(datos_relevantes)
#Analisis exploratorio con nuevas variables
summary(datos_relevantes)
# ----------------------------------------------
# Separación de datos en entrenamiento y prueba
# ----------------------------------------------
set.seed(123)
porciento <- 60/100 # 60% para training y 40% para pruebas
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))# Seleccion de muestras aleatorias
trainSet<-datos_relevantes[muestra,] # Grupo de entrenamiento
testSet<-datos_relevantes[-muestra,] # Grupo de pruebas
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet.gc_labels <- trainSet[muestra,1]
testSet.gc_labels  <- testSet[-muestra,1]
trainSet.gc_labels
trainSet.gc_labels
NROW(trainSet.gc_labels)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)
trainSet.gc_labels <- na.omit(trainSet.gc_labels)
trainSet.gc_labels
NROW(trainSet.gc_labels)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet.gc_labels <- trainSet[muestra,1]
testSet.gc_labels  <- testSet[-muestra,1]
trainSet.gc_labels <- na.omit(trainSet.gc_labels)
trainSet.gc_labels
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet.gc_labels <- trainSet[muestra,1]
testSet.gc_labels  <- testSet[-muestra,1]
trainSet.gc_labels <- na.omit(trainSet.gc_labels)
trainSet.gc_labels
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet.gc_labels <- trainSet[muestra,1]
testSet.gc_labels  <- testSet[-muestra,1]
trainSet.gc_labels
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)
trainSet.gc_labels
knn.26 <-  knn(train=trainSet, test=testSet, cl=trainSet.gc_labels, k=29)
knn.26 <-  knn(train=trainSet, test=testSet k=29)
library(caret)
set.seed(123)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trctrl, k=29)
library(class)
knn.26 <-  knn(train=trainSet, test=testSet, cl=trctrl, k=29)
datos_relevantes <- datos[, c("LotArea", "YearRemodAdd", "YearBuilt", "GarageCars", "PoolArea", "YrSold", "SalePrice")]
datos_relevantes <- na.omit(datos_relevantes)
# ----------------------------------------------
# Separación de datos en entrenamiento y prueba
# ----------------------------------------------
set.seed(123)
porciento <- 60/100 # 60% para training y 40% para pruebas
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))# Seleccion de muestras aleatorias
trainSet<-datos_relevantes[muestra,] # Grupo de entrenamiento
testSet<-datos_relevantes[-muestra,] # Grupo de pruebas
trainSet$am<-as.factor(trainSet$am)
set.seed(123)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
trainSet$am<-as.factor(trainSet$am)
predKnn<-knn(trainSet[,c(1:8,10:11)],testSet[,c(1:8,10:11)],as.factor(trainSet$am),k=3)
############
#KNN
############
trainSet
predKnn<-knn(trainSet,testSet,as.factor(trainSet$am),k=29)
############
#KNN
############
trainSet$am
# install.packages("class")
# install.packages("caret")
library(class)
library(caret)
datos<-mtcars
set.seed(123)
porciento <- 70/100 #Porciento en el que se partirÃ¡n los datos
muestra<-sample(1:nrow(datos),porciento*nrow(datos))#Muestra aleatoria de numeros de un vector
trainSet<-datos[muestra,] #Obtengo las filas de los elementos que estan en el sector de muestra
testSet<-datos[-muestra,] #Obtengo las filas de los elementos que no estÃ¡n en el vector de muestra
#Para predecir si la transmisión de un carro será mecánica o automática
#Con class
library(class)
predKnn<-knn(trainSet[,c(1:8,10:11)],testSet[,c(1:8,10:11)],as.factor(trainSet$am),k=3)
cfm<-confusionMatrix(as.factor(testSet$am),predKnn)
cfm
#Con caret usando validación cruzada
set.seed(123)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
trainSet$am<-as.factor(trainSet$am)
testSet$am<-as.factor(testSet$am)
knnTrain <- train(am ~., data = trainSet, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), tuneLength=10)
predknn<-predict(knnTrain,newdata = testSet[,c(1:8,10:11)])
summary(knnTrain)
cfm<-confusionMatrix(as.factor(testSet$am),predKnn)
cfm
trainSet$am
datos<-mtcars
datos
trainSet<-datos[muestra,] #Obtengo las filas de los elementos que estan en el sector de muestra
testSet<-datos[-muestra,] #Obtengo las filas de los elementos que no estÃ¡n en el vector de muestra
trainSet$am
library(dplyr)
library(ggplot2)
library(corrplot)
library(gmodels)
library(Hmisc)
library(ggthemes)
library(class)
library(caret)
# Ivette
setwd("C:/Users/DELL/Documents/UVG/VIII_Semestre/Data Science/DSLaboratorio2")
# --------------------
# Lectura de los datos
# --------------------
datos <- read.csv("train.csv")
datos_relevantes <- datos[, c("LotArea", "YearRemodAdd", "YearBuilt", "GarageCars", "PoolArea", "YrSold", "SalePrice")]
############
#KNN
############
set.seed(123)
porciento <- 60/100 #Porciento en el que se partirÃ¡n los datos
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))#Muestra aleatoria de numeros de un vector
trainSet<-datos[muestra,] #Obtengo las filas de los elementos que estan en el sector de muestra
testSet<-datos[-muestra,] #Obtengo las filas de los elementos que no estÃ¡n en el vector de muestra
trainSet$am
datos<-mtcars
set.seed(123)
porciento <- 70/100 #Porciento en el que se partirÃ¡n los datos
muestra<-sample(1:nrow(datos),porciento*nrow(datos))#Muestra aleatoria de numeros de un vector
trainSet<-datos[muestra,] #Obtengo las filas de los elementos que estan en el sector de muestra
testSet<-datos[-muestra,] #Obtengo las filas de los elementos que no estÃ¡n en el vector de muestra
trainSet
datos<-mtcars
set.seed(123)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
# ----------------------------------------------
# Separación de datos en entrenamiento y prueba
# ----------------------------------------------
set.seed(123)
porciento <- 60/100 # 60% para training y 40% para pruebas
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))# Seleccion de muestras aleatorias
trainSet<-datos_relevantes[muestra,] # Grupo de entrenamiento
testSet<-datos_relevantes[-muestra,] # Grupo de pruebas
#Now creating seperate dataframe for 'Creditability' feature which is our target.
trainSet
trainSet$am<-as.factor(trainSet$SalePrice)
testSet$am<-as.factor(testSet$SalePrice)
#Cartet
trainSet$SalePrice
predKnn<-knn(trainSet,testSet,as.factor(trainSet$SalePrice),k=29)
cfm<-confusionMatrix(as.factor(testSet$am),predKnn)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
predKnn<-knn(trainSet,testSet,as.factor(trainSet$SalePrice),k=29)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
predKnn
trainSet[,c(1:8,10:11)
print <- trainSet[,c(1:8,10:11)
print <- trainSet[,c(1:8,10:11)]
print
trainSet[,c(1:8,10:11)]
trainSet$am
trainSet[,c(1:8,10:11)]
datos<-mtcars
set.seed(123)
porciento <- 70/100 #Porciento en el que se partirÃ¡n los datos
muestra<-sample(1:nrow(datos),porciento*nrow(datos))#Muestra aleatoria de numeros de un vector
trainSet<-datos[muestra,] #Obtengo las filas de los elementos que estan en el sector de muestra
testSet<-datos[-muestra,] #Obtengo las filas de los elementos que no estÃ¡n en el vector de muestra
trainSet
trainSet[,c(1:8,10:11)]
testSet[,c(1:8,10:11)]
#Cartet
trainSet
# --------------------
# Lectura de los datos
# --------------------
datos <- read.csv("train.csv")
datos_relevantes <- datos[, c("LotArea", "YearRemodAdd", "YearBuilt", "GarageCars", "PoolArea", "YrSold", "SalePrice")]
datos_relevantes <- na.omit(datos_relevantes)
set.seed(123)
porciento <- 60/100 # 60% para training y 40% para pruebas
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))# Seleccion de muestras aleatorias
trainSet<-datos_relevantes[muestra,] # Grupo de entrenamiento
testSet<-datos_relevantes[-muestra,] # Grupo de pruebas
#Cartet
trainSet
#Cartet
trainSet
predKnn<-knn(trainSet[,-7],testSet[,-7],as.factor(trainSet$SalePrice),k=29)
predKnn
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
testSet$SalePrice
cfm<-confusionMatrix(testSet$SalePrice,predKnn)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),as.factor(predKnn))
cfm
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
str(predKnn)
str(testSet$SalePrice)
str(as.factor(testSet$SalePrice))
#30
predKnn<-knn(trainSet[,-7],testSet[,-7],as.factor(trainSet$SalePrice),k=30)
str(predKnn)
str(as.factor(testSet$SalePrice))
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
#Cartet
table(trainSet[,1])
View(trainSet)
#Cartet
table(trainSet[,1])
table(testSet[,1])
#Cartet
1 <- table(trainSet[,1])
dos <- table(testSet[,1])
#Cartet
uno <- table(trainSet[,1])
dos <- table(testSet[,1])
uno
#Cartet
table(trainSet[,1])
table(testSet[,1])
testSet$SalePrice <- as.factor(testSet$SalePrice)
predKnn<-knn(trainSet[,-7],testSet[,-7],trainSet$SalePrice,k=29)
str(predKnn)
str(as.factor(testSet$SalePrice))
levels(testSet$SalePrice) <- levels(predKnn)
confusionMatrix(prediction,test1$Recommended)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
cfm
predKnn<-knn(trainSet[,-7],testSet[,-7],trainSet$SalePrice,k=30)
str(predKnn)
str(as.factor(testSet$SalePrice))
levels(testSet$SalePrice) <- levels(predKnn)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
cfm
predKnn<-knn(trainSet[,-7],testSet[,-7],trainSet$SalePrice,k=29)
str(predKnn)
str(as.factor(testSet$SalePrice))
levels(testSet$SalePrice) <- levels(predKnn)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
cfm
predKnn<-knn(trainSet[,-7],testSet[,-7],trainSet$SalePrice,k=30)
levels(testSet$SalePrice) <- levels(predKnn)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
cfm
testSet$SalePrice
hist(datos_relevantes$SalePrice, col="lightcyan", main="Histograma de SalePrice")
qqnorm(datos_relevantes$SalePrice, main="SalePrice")
qqline(datos_relevantes$SalePrice, col = "red")
# --------------------
# Lectura de los datos
# --------------------
datos <- read.csv("train.csv")
datos_relevantes <- datos[, c("LotArea", "YearRemodAdd", "YearBuilt", "GarageCars", "PoolArea", "YrSold", "SalePrice")]
datos_relevantes <- na.omit(datos_relevantes)
# --------------------
# Lectura de los datos
# --------------------
datos <- read.csv("train.csv")
datos_relevantes <- datos[, c("LotArea", "YearRemodAdd", "YearBuilt", "GarageCars", "PoolArea", "YrSold", "SalePrice")]
#Analisis exploratorio con nuevas variables
summary(datos_relevantes)
if (testSet$SalePrice < 129975 ) {
testSet$compar <- 1
} else if (testSet$SalePrice > 214000) {
testSet$compar <- 3
} else if (testSet$SalePrice < 214000 & testSet$SalePrice > 129975) {
testSet$compar <- 2
}
############
#Variable limite
############
testSet$SalePrice <- as.factor(testSet$SalePrice)
if (testSet$SalePrice < 129975 ) {
testSet$compar <- 1
} else if (testSet$SalePrice > 214000) {
testSet$compar <- 3
} else if (testSet$SalePrice < 214000 & testSet$SalePrice > 129975) {
testSet$compar <- 2
}
if (testSet$SalePrice < 129975 ) {
testSet$compar <- 1
} else if (testSet$SalePrice > 214000) {
testSet$compar <- 3
} else if (testSet$SalePrice < 214000 & testSet$SalePrice > 129975) {
testSet$compar <- 2
}
set.seed(123)
porciento <- 60/100 # 60% para training y 40% para pruebas
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))# Seleccion de muestras aleatorias
trainSet<-datos_relevantes[muestra,] # Grupo de entrenamiento
testSet<-datos_relevantes[-muestra,] # Grupo de pruebas
if (testSet$SalePrice < 129975 ) {
testSet$compar <- 1
} else if (testSet$SalePrice > 214000) {
testSet$compar <- 3
} else if (testSet$SalePrice < 214000 & testSet$SalePrice > 129975) {
testSet$compar <- 2
}
testSet$compar <- cut(testSet$SalePrice, breaks = c(-Inf, 129975, 214000, Inf),
labels = c(1, 2, 3))
testSet
testSet$compar <- as.factor(testSet$compar)
#29
trainSet
testSet$compar <- as.factor(testSet$compar)
############
#Variable limite
############
testSet$compar <- cut(testSet$SalePrice, breaks = c(-Inf, 129975, 214000, Inf),
labels = c(1, 2, 3))
testSet
predKnn<-knn(trainSet[,-8],testSet[,-8],trainSet$compar,k=29)
testSet$compar <- as.factor(testSet$compar)
predKnn<-knn(trainSet[,-8],testSet[,-8],trainSet$compar,k=29)
predKnn<-knn(trainSet[,-7],testSet[,-7],trainSet$compar,k=29)
str(testSet$compar)
predKnn<-knn(trainSet,testSet,trainSet$SalePrice,k=30)
#29
trainSet
testSet$SalePrice <- as.factor(testSet$SalePrice)
predKnn<-knn(trainSet[,-7],testSet[,-7],trainSet$SalePrice,k=30)
predKnn<-knn(trainSet,testSet,trainSet$SalePrice,k=30)
View(testSet)
testSet$compar <- cut(testSet$SalePrice, breaks = c(-Inf, 129975, 214000, Inf),
labels = c(1, 2, 3))
testSet
trainSet$compar <- cut(trainSet$SalePrice, breaks = c(-Inf, 129975, 214000, Inf),
labels = c(1, 2, 3))
trainSet
predKnn<-knn(trainSet,testSet,trainSet$compar,k=29)
predKnn<-knn(trainSet,testSet,as.factor(trainSet$compar)29)
predKnn<-knn(trainSet,testSet,as.factor(trainSet$compar), k = 29)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
levels(testSet$compar) <- levels(predKnn)
cfm<-confusionMatrix(as.factor(testSet$SalePrice),predKnn)
predKnn<-knn(trainSet,testSet,as.factor(trainSet$compar), k = 29)
cfm<-confusionMatrix(as.factor(testSet$compar),predKnn)
cfm
testSet$SalePrice <- as.factor(testSet$SalePrice)
predKnn<-knn(trainSet,testSet,as.factor(trainSet$compar), k = 30)
cfm<-confusionMatrix(as.factor(testSet$compar),predKnn)
cfm
#30
predKnn<-knn(trainSet,testSet,as.factor(trainSet$compar), k = 30)
cfm<-confusionMatrix(as.factor(testSet$compar),predKnn)
cfm
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
#Con caret usando validación cruzada
set.seed(123)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
library(dplyr)
library(ggplot2)
library(corrplot)
library(gmodels)
library(Hmisc)
library(ggthemes)
library(class)
library(caret)
#Con caret usando validación cruzada
set.seed(123)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
trainSet$compar<-as.factor(trainSet$compar)
testSet$compar<-as.factor(compar)
testSet$compar<-as.factor(testSet$compar)
knnTrain <- train(compar ~., data = trainSet, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), tuneLength=10)
predknn<-predict(knnTrain,newdata = testSet)
datos_relevantes <- datos[, c("LotArea", "YearRemodAdd", "YearBuilt", "GarageCars", "PoolArea", "YrSold", "SalePrice")]
set.seed(123)
porciento <- 60/100 # 60% para training y 40% para pruebas
muestra<-sample(1:nrow(datos_relevantes),porciento*nrow(datos_relevantes))# Seleccion de muestras aleatorias
trainSet<-datos_relevantes[muestra,] # Grupo de entrenamiento
testSet<-datos_relevantes[-muestra,] # Grupo de pruebas
set.seed(123)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
trainSet$compar<-as.factor(trainSet$compar)
testSet$compar<-as.factor(testSet$compar)
knnTrain <- train(compar ~., data = trainSet, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), tuneLength=10)
############
#Variable limite
############
testSet$compar <- cut(testSet$SalePrice, breaks = c(-Inf, 129975, 214000, Inf),
labels = c(1, 2, 3))
testSet
trainSet$compar <- cut(trainSet$SalePrice, breaks = c(-Inf, 129975, 214000, Inf),
labels = c(1, 2, 3))
trainSet
#Con caret usando validación cruzada
set.seed(123)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
trainSet$compar<-as.factor(trainSet$compar)
testSet$compar<-as.factor(testSet$compar)
knnTrain <- train(compar ~., data = trainSet, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), tuneLength=10)
predknn<-predict(knnTrain,newdata = testSet)
summary(knnTrain)
cfm<-confusionMatrix(as.factor(testSet$am),predKnn)
cfm<-confusionMatrix(as.factor(testSet$compar),predKnn)
cfm
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 29)
trainSet$compar<-as.factor(trainSet$compar)
testSet$compar<-as.factor(testSet$compar)
knnTrain <- train(compar ~., data = trainSet, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), tuneLength=10)
predknn<-predict(knnTrain,newdata = testSet)
summary(knnTrain)
cfm<-confusionMatrix(as.factor(testSet$compar),predKnn)
cfm
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 29)
trainSet$compar<-as.factor(trainSet$compar)
testSet$compar<-as.factor(testSet$compar)
knnTrain <- train(compar ~., data = trainSet, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), tuneLength=10)
predknn<-predict(knnTrain,newdata = testSet)
summary(knnTrain)
cfm<-confusionMatrix(as.factor(testSet$compar),predKnn)
cfm
